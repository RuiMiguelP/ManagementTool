package pt.uc.dei.paj.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import pt.uc.dei.paj.validator.ValidatorUtil;

import javax.inject.Inject;
import javax.security.auth.login.CredentialException;
import javax.validation.ConstraintViolation;

import javax.validation.Validator;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.GenericEntity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.jboss.resteasy.annotations.providers.multipart.MultipartForm;

import pt.uc.dei.paj.dao.AllocationDAO;
import pt.uc.dei.paj.dao.ProfileDAO;
import pt.uc.dei.paj.dao.UserDAO;
import pt.uc.dei.paj.dto.CredentialsDTO;
import pt.uc.dei.paj.dto.HttpMessageDTO;
import pt.uc.dei.paj.dto.UserDTO;
import pt.uc.dei.paj.entity.Allocation;
import pt.uc.dei.paj.entity.Profile;
import pt.uc.dei.paj.entity.User;
import pt.uc.dei.paj.enums.ProfileType;
import pt.uc.dei.paj.util.Constants;
import pt.uc.dei.paj.util.EmailUtil;
import pt.uc.dei.paj.util.EntityMapper;
import pt.uc.dei.paj.util.Generator;

@Path("/users")
@Consumes({ MediaType.APPLICATION_JSON })
@Produces({ MediaType.APPLICATION_JSON })
public class UserService {

	private static final Logger logger = Logger.getLogger("UserService");

	@Inject
	UserDAO userDAO;

	@Inject
	ProfileDAO profileDAO;

	@Inject
	AllocationDAO allocationDAO;
	
	@Inject
	Validator validator;

	@POST
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	public Response signUp(@MultipartForm UserDTO userDTO) {

		try {

			System.out.println("**** User Service - Calling signUp ****");

			Set<ConstraintViolation<UserDTO>> constraintViolations = validator.validate(userDTO);

			if (userDAO.findByEmail(userDTO.getEmail()) == null) {

				if (constraintViolations.isEmpty()) {

					String imgUrl = EntityMapper.writeProfilePhoto(userDTO.getFile(), userDTO.getEmail());
					userDTO.setImgUrl(imgUrl);

					User user = userDAO.signUp(userDTO);
					Profile profile = profileDAO.findByProfileType(ProfileType.VISITOR);
					userDAO.addProfileToUser(user, profile);
					EmailUtil.sendEmail(user.getName(), user.getEmail());
					EmailUtil.sendConfirmationEmail(user.getEmail(), userDTO.getValidationURL());
					return Response.status(Status.CREATED).entity(new HttpMessageDTO(Constants.USER_CREATED)).build();

				} else {
					for (ConstraintViolation<UserDTO> violation : constraintViolations) {
						logger.log(Level.INFO, violation.getPropertyPath() + " Message: " + violation.getMessage());
					}
					return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO(Constants.INVALID_FIELDS))
							.build();
				}

			}
			return Response.status(Status.CONFLICT).entity(new HttpMessageDTO(Constants.EMAIL_IN_USE)).build();

		} catch (Exception e) {
			System.out.println("ERROR: " + e);
			return Response.status(Status.INTERNAL_SERVER_ERROR)
					.entity(new HttpMessageDTO(Constants.REGISTRATION_FAILED)).build();
		}
	}

	@POST
	@Path("/login")
	public Response login(@Email @NotNull @HeaderParam("email") String email,
			@NotNull @HeaderParam("password") String password) {
		try {

			System.out.println("**** User Service - Calling login ****");

			User user = userDAO.findByEmail(email);
			if (user != null) {
				if (ValidatorUtil.verifyActiveStatus(user)) {
					if (ValidatorUtil.verifyProvidedPassword(password, user.getPassword(), user.getSaltPassword())) {
						String token = Generator.generateNewToken();
						user.setToken(token);

						userDAO.merge(user);
						boolean isAdmin = userDAO.findUserProfile(user,
								profileDAO.findByProfileType(ProfileType.ADMIN));

						boolean isDirector = userDAO.findUserProfile(user,
								profileDAO.findByProfileType(ProfileType.DIRECTOR));

						boolean isUser = userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.USER));

						boolean isVisitor = userDAO.findUserProfile(user,
								profileDAO.findByProfileType(ProfileType.VISITOR));

						if (!ValidatorUtil.isNullOrEmpty(user.getImgUrl())) {
							byte[] profilePhoto = EntityMapper.readProfilePhoto(user.getImgUrl());
							return Response.ok(new UserDTO(user.getId(), user.getToken(), user.getName(), isAdmin,
									isDirector, isUser, isVisitor, profilePhoto)).build();

						}

						return Response.ok(new UserDTO(user.getId(), user.getToken(), user.getName(), isAdmin,
								isDirector, isUser, isVisitor)).build();
					}
					return Response.status(Status.UNAUTHORIZED)
							.entity(new HttpMessageDTO(Constants.LOGIN_UNAUTHORIZED_PASSWORD)).build();
				}

				return Response.status(Status.FORBIDDEN).entity(new HttpMessageDTO(Constants.INACTIVE_ACCOUNT)).build();
			}
			return Response.status(Status.NOT_FOUND).entity(new HttpMessageDTO(Constants.LOGIN_NOT_FOUND_USER)).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(new HttpMessageDTO(Constants.LOGIN_FAILED))
					.build();
		}
	}

	@POST
	@Path("google/login")
	public Response googleLogin(@Email @NotNull @HeaderParam("email") String email,
			@NotNull @HeaderParam("googleId") String googleId, UserDTO userDTO) {
		try {

			System.out.println("**** User Service - Calling googleLogin ****");

			User user = userDAO.findByEmail(email);
			if (user != null) {
				if (ValidatorUtil.verifyActiveStatus(user)) {
					if (ValidatorUtil.verifyProvidedGoogleId(googleId, user.getGoogleId())) {
						String token = Generator.generateNewToken();
						user.setToken(token);
						userDAO.merge(user);
					} else {
						return Response.status(Status.UNAUTHORIZED)
								.entity(new HttpMessageDTO(Constants.LOGIN_UNAUTHORIZED_PASSWORD)).build();
					}
				}
				return Response.status(Status.FORBIDDEN).entity(new HttpMessageDTO(Constants.INACTIVE_ACCOUNT)).build();
			} else {
				user = userDAO.signUp(userDTO.getName(), email, googleId, userDTO.getImgUrl());

				Profile profile = profileDAO.findByProfileType(ProfileType.VISITOR);
				userDAO.addProfileToUser(user, profile);
				EmailUtil.sendEmail(user.getName(), user.getEmail());
			}
			boolean isAdmin = userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.ADMIN));

			boolean isDirector = userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.DIRECTOR));

			boolean isUser = userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.USER));

			boolean isVisitor = userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.VISITOR));
			
			return Response.ok(new UserDTO(user.getId(), user.getToken(), user.getName(), isAdmin, isDirector, isUser, isVisitor)).build();
		} catch (Exception e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(new HttpMessageDTO(Constants.LOGIN_FAILED))
					.build();
		}
	}

	@POST
	@Path("/logout")
	public Response logout(@Email @NotNull @HeaderParam("email") String email,
			@NotNull @HeaderParam("token") String token) {
		try {

			System.out.println("**** User Service - Calling logout ****");

			User user = userDAO.validateSession(email, token);
			user.setToken(null);
			userDAO.merge(user);

			return Response.status(Status.OK).entity(new HttpMessageDTO(Constants.LOG_OUT_SUCCESS)).build();

		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		} catch (Exception e) {
			return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO(Constants.LOGOUT_FAILED)).build();
		}
	}

	@PUT
	@Path("/registerValidation")
	public Response registerValidation(CredentialsDTO credentials) {

		try {

			System.out.println("**** User Service - Calling register validation ****");

			User user = userDAO.validateSession(credentials.getEmail(), credentials.getToken());

			user.setActive(true);
			user.setToken(null);
			userDAO.merge(user);

			return Response.status(Status.OK).entity(new HttpMessageDTO(Constants.REGISTRATION_VALIDATED)).build();

		} catch (CredentialException e) {
			return Response.status(Status.BAD_REQUEST)
					.entity(new HttpMessageDTO(Constants.REGISTRATION_VALIDATION_FAILED)).build();
		}

	}

	@PUT
	@Path("/confirmationMail")
	public Response resendConfirmationMail(UserDTO userDTO) {

		try {

			System.out.println("**** User Service - Calling resend confirmation mail ****");

			EmailUtil.sendConfirmationEmail(userDTO.getEmail(), userDTO.getValidationURL());

			return Response.status(Status.OK).build();

		} catch (InternalError e) {
			return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO(Constants.REGISTRATION_FAILED))
					.build();
		}
	}

	@GET
	public Response findUser(@NotEmpty @Email @HeaderParam("email") String email,
			@NotEmpty @HeaderParam("token") String token) {

		try {
			userDAO.validateSession(email, token);
			ArrayList<User> result = new ArrayList<>();

			System.out.println("****User Service - Calling findAllUser ****");
			result = (ArrayList<User>) userDAO.findAll();

			if (result.isEmpty()) {
				return Response.status(Response.Status.NOT_FOUND).entity(Constants.RECORDS_NOT_EXISTS).build();
			}

			ArrayList<UserDTO> usersDTO = mapProfiles(result);
			GenericEntity<List<UserDTO>> list = new GenericEntity<List<UserDTO>>(usersDTO) {
			};

			return Response.status(Response.Status.OK).entity(list).build();
		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		} catch (Exception e) {
			return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO(Constants.INVALID_FORMAT)).build();
		}
	}

	/*
	 * @GET
	 * 
	 * @Path("/{userId}/avaliable") public Response avaliableUsers(
	 * 
	 * @NotEmpty @Email @HeaderParam("email") String email,
	 * 
	 * @NotEmpty @HeaderParam("token") String token,
	 * 
	 * @PathParam("userId") String userId,
	 * 
	 * @QueryParam("startDate") String projectStartDate,
	 * 
	 * @QueryParam("endDate") String projectEndDate) {
	 * 
	 * System.out.println("**** User Service - Calling Get Avaliable Resources ****"
	 * );
	 * 
	 * Instant startDate = Instant.parse(projectStartDate); Instant endDate =
	 * Instant.parse(projectEndDate);
	 * 
	 * System.out.println(startDate); System.out.println(endDate);
	 * 
	 * System.out.println(userId);
	 * 
	 * return null; }
	 */

	@GET
	@Path("/available")
	public Response allAvailableUsers(@NotEmpty @Email @HeaderParam("email") String email,
			@NotEmpty @HeaderParam("token") String token) {

		try {
			User director = userDAO.validateSession(email, token);

			System.out.println("**** Project Service - Calling allAvailableUsers ****");

			if (userDAO.findUserProfile(director, profileDAO.findByProfileType(ProfileType.DIRECTOR))) {

				List<User> users = userDAO.findAll();

				List<UserDTO> userDTOs = new ArrayList<>();

				for (User user : users) {

					if (user.isActive()
							&& (userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.DIRECTOR))
									|| userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.USER)))) {
						userDTOs.add(user.toDTO());
					}
				}

				return Response.status(Status.OK).entity(userDTOs).build();
			} else {

				return Response.status(Status.UNAUTHORIZED)
						.entity(new HttpMessageDTO(Constants.UNAUTHORIZED_PERMISSION)).build();
			}

		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		}

	}
	
	@GET
	@Path("/{projectId}/available")
	public Response allAvailableUsersByProject(@NotEmpty @Email @HeaderParam("email") String email,
			@NotEmpty @HeaderParam("token") String token, @PathParam("projectId") long projectId) {

		try {
			User director = userDAO.validateSession(email, token);

			System.out.println("**** Project Service - Calling allAvailableUsersByProject ****");

			if (userDAO.findUserProfile(director, profileDAO.findByProfileType(ProfileType.DIRECTOR))) {

				ArrayList<Allocation> allocations = allocationDAO.findProjectResources(projectId);
				
				List<User> users = userDAO.findAll();

				List<UserDTO> userDTOs = new ArrayList<>();

				for (User user : users) {
					for (Allocation alloc: allocations) {
						if (user.isActive()
								&& (userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.DIRECTOR))
										|| userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.USER)))) {
							userDTOs.add(user.toDTO());
						}

					}
									}

				return Response.status(Status.OK).entity(userDTOs).build();
			} else {

				return Response.status(Status.UNAUTHORIZED)
						.entity(new HttpMessageDTO(Constants.UNAUTHORIZED_PERMISSION)).build();
			}

		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		}

	}

	@PUT
	@Path("/{userId}")
	public Response changeStateActive(@NotEmpty @Email @HeaderParam("email") String email,
			@NotEmpty @HeaderParam("token") String token, @NotNull @PathParam("userId") int userId,
			@QueryParam("active") boolean isActive) {
		try {

			System.out.println("**** User Service - Calling changeStateActive ****");

			User user = userDAO.validateSession(email, token);
			if (userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.ADMIN))) {
				userDAO.updateStateActive(isActive, userId);
				return Response.status(Status.OK).entity(new HttpMessageDTO(Constants.UPDATE_STATE_ACTIVE_SUCCESS))
						.build();
			}
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO(Constants.UNAUTHORIZED_PERMISSION))
					.build();
		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		} catch (Exception e) {
			return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO(Constants.INVALID_FORMAT)).build();
		}
	}

	@PUT
	@Path("/{userId}/edit")
	public Response editUser(@NotEmpty @Email @HeaderParam("email") String email,
			@NotEmpty @HeaderParam("token") String token, @NotNull @PathParam("userId") int userId, UserDTO userDTO) {
		try {

			System.out.println("**** User Service - Calling editUser ****");

			User user = userDAO.validateSession(email, token);
			if (userDAO.findUserProfile(user, profileDAO.findByProfileType(ProfileType.ADMIN))) {
				userDAO.updateOccupation(userDTO.getOccupation(), userId);

				User userEdit = userDAO.findById(userId);
				updateProfiles(userEdit, userDTO);

				return Response.status(Status.OK).entity(new HttpMessageDTO(Constants.UPDATE_USER_SUCCESS)).build();
			}
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO(Constants.UNAUTHORIZED_PERMISSION))
					.build();
		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		} catch (Exception e) {
			return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO(Constants.INVALID_FORMAT)).build();
		}
	}

	@PUT
	@Path("/sendResetPasswordEmail")
	public Response sendResetPasswordEmail(UserDTO userDTO) {

		try {

			System.out.println("**** User Service - Calling send reset password email ****");

			User user = userDAO.findByEmail(userDTO.getEmail());

			if (user != null) {
				user.setToken(userDTO.getToken());
				userDAO.merge(user);
				EmailUtil.sendResetPasswordEmail(user.getEmail(), userDTO.getValidationURL());
				return Response.status(Status.OK).entity(new HttpMessageDTO(Constants.EMAIL_RESET_PASSWORD_SUCCESSS))
						.build();
			}

			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO(Constants.UNAUTHORIZED_PERMISSION))
					.build();
		} catch (Exception e) {
			return Response.status(Status.BAD_REQUEST).entity("Error: " + e.getMessage()).build();
		}
	}

	@PUT
	@Path("/resetPassword")
	public Response resetPassword(CredentialsDTO credentials) {

		try {

			System.out.println("**** User Service - Calling reset password ****");

			User user = userDAO.validateSession(credentials.getEmail(), credentials.getToken());
			if (ValidatorUtil.isNullOrEmpty(user.getGoogleId())) {
				userDAO.changePassword(user, credentials.getPassword());

				return Response.status(Status.OK).entity(new HttpMessageDTO(Constants.RESET_PASSWORD_SUCCESSS)).build();
			}

			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO(Constants.UNAUTHORIZED_PERMISSION))
					.build();
		} catch (CredentialException e) {
			return Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		} catch (Exception e) {
			return Response.status(Status.BAD_REQUEST).entity(new HttpMessageDTO("Error: " + e.getMessage())).build();
		}
	}

	/*
	 * 
	 * 
	 * 
	 * @GET
	 * 
	 * @Path("/{id}") public Response findById(@HeaderParam("email") String
	 * email, @HeaderParam("token") String token,
	 * 
	 * @PathParam("id") int id) {
	 * 
	 * try { System.out.println("**** User Service -  Calling findById ****");
	 * 
	 * User user = userDao.validateSession(email, token);
	 * 
	 * if (user.getId() == id || user.isAdmin()) { User result =
	 * userDao.findById(id); if (result == null) { return
	 * Response.status(Response.Status.NOT_FOUND).entity(Constants.
	 * RECORDS_NOT_EXISTS).build(); } UserDto userDto = result.toDto(); return
	 * Response.status(Response.Status.OK).entity(userDto).build(); } return
	 * Response.status(Status.UNAUTHORIZED).entity(new
	 * HttpMessageDto(Constants.UNAUTHORIZED_PERMISSION)) .build(); } catch
	 * (CredentialException e) { return
	 * Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDto("Error: " +
	 * e.getMessage())).build(); } catch (Exception e) { return
	 * Response.status(Status.BAD_REQUEST).entity(new
	 * HttpMessageDto(Constants.INVALID_FORMAT)).build(); } }
	 * 
	 * @GET public Response findUser(@HeaderParam("email") String
	 * email, @HeaderParam("token") String token,
	 * 
	 * @DefaultValue("") @QueryParam("isAdmin") String isAdmin) {
	 * 
	 * try { User user = userDao.validateSession(email, token);
	 * 
	 * ArrayList<User> result = new ArrayList<>();
	 * 
	 * if (Validator.isNullOrEmpty(isAdmin)) {
	 * 
	 * System.out.println("****User Service - Calling findAllUser ****"); result =
	 * (ArrayList<User>) userDao.findAll(); } else {
	 * 
	 * System.out.println("****User Service - Calling findAllUserAdmin ****");
	 * 
	 * result = (ArrayList<User>)
	 * userDao.findAllByAdmin(Boolean.getBoolean(isAdmin)); }
	 * 
	 * if (result.isEmpty()) { return
	 * Response.status(Response.Status.NOT_FOUND).entity(Constants.
	 * RECORDS_NOT_EXISTS).build(); } ArrayList<UserDto> resultDto =
	 * EntityMapper.toUserDtoList(result); GenericEntity<List<UserDto>> list = new
	 * GenericEntity<List<UserDto>>(resultDto) { };
	 * 
	 * return Response.status(Response.Status.OK).entity(list).build(); } catch
	 * (CredentialException e) { return
	 * Response.status(Status.UNAUTHORIZED).entity(new HttpMessageDto("Error: " +
	 * e.getMessage())).build(); } catch (Exception e) { return
	 * Response.status(Status.BAD_REQUEST).entity(new
	 * HttpMessageDto(Constants.INVALID_FORMAT)).build(); } }
	 */

	private void updateProfiles(User userEdit, UserDTO userDTO) {
		for (ProfileType profileValue : ProfileType.values()) {
			switch (profileValue) {
			case ADMIN:
				handleProfile(userDTO.isAdmin(), profileValue, userEdit);
				break;
			case DIRECTOR:
				handleProfile(userDTO.isDirector(), profileValue, userEdit);
				break;
			case USER:
				handleProfile(userDTO.isUser(), profileValue, userEdit);
				break;
			case VISITOR:
				handleProfile(userDTO.isVisitor(), profileValue, userEdit);
				break;
			default:
				break;
			}
		}
		userDAO.merge(userEdit);
	}

	private void handleProfile(boolean value, ProfileType profileType, User userEdit) {
		if (value) {
			userEdit.addProfile(profileDAO.findByProfileType(profileType));
		} else {
			userEdit.removeProfile(profileDAO.findByProfileType(profileType));
		}
	}

	public ArrayList<UserDTO> mapProfiles(ArrayList<User> users) {
		ArrayList<UserDTO> listDTO = new ArrayList<>();

		for (User user : users) {
			UserDTO userDTO = user.toDTO();
			for (ProfileType profileValue : ProfileType.values()) {
				boolean value = userDAO.findUserProfile(user, profileDAO.findByProfileType(profileValue));
				userDTO = EntityMapper.filterValue(profileValue, userDTO, value);
			}
			listDTO.add(userDTO);
		}
		return listDTO;
	}
}
